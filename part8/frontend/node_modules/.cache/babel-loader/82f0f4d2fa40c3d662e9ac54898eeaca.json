{"ast":null,"code":"import { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n  return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n  return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n  return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\nexport function mergeIncrementalData(prevResult, result) {\n  var mergedData = prevResult;\n  var merger = new DeepMerger();\n\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (_a) {\n      var data = _a.data,\n          path = _a.path;\n\n      for (var i = path.length - 1; i >= 0; --i) {\n        var key = path[i];\n        var isNumericKey = !isNaN(+key);\n        var parent_1 = isNumericKey ? [] : {};\n        parent_1[key] = data;\n        data = parent_1;\n      }\n\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n\n  return mergedData;\n}","map":{"version":3,"mappings":"AAMA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,OAAM,SAAUC,iCAAV,CACJC,KADI,EACc;EAElB,OAAO,iBAAiBA,KAAxB;AACD;AAED,OAAM,SAAUC,6BAAV,CACJD,KADI,EACc;EAElB,OAAO,aAAaA,KAAb,IAAsB,UAAUA,KAAvC;AACD;AAED,OAAM,SAAUE,sBAAV,CACJF,KADI,EACc;EAElB,OACED,iCAAiC,CAACC,KAAD,CAAjC,IACAC,6BAA6B,CAACD,KAAD,CAF/B;AAID;AAED,OAAM,SAAUG,oBAAV,CACJC,UADI,EAEJC,MAFI,EAE+B;EAEnC,IAAIC,UAAU,GAAGF,UAAjB;EACA,IAAMG,MAAM,GAAG,IAAIT,UAAJ,EAAf;;EACA,IACEC,iCAAiC,CAACM,MAAD,CAAjC,IACAR,eAAe,CAACQ,MAAM,CAACG,WAAR,CAFjB,EAGE;IACAH,MAAM,CAACG,WAAP,CAAmBC,OAAnB,CAA2B,UAACC,EAAD,EAAe;UAAZC,IAAI;UAAEC,IAAI;;MACtC,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsC,EAAEA,CAAxC,EAA2C;QACzC,IAAME,GAAG,GAAGH,IAAI,CAACC,CAAD,CAAhB;QACA,IAAMG,YAAY,GAAG,CAACC,KAAK,CAAC,CAACF,GAAF,CAA3B;QACA,IAAMG,QAAM,GAAiCF,YAAY,GAAG,EAAH,GAAQ,EAAjE;QACAE,QAAM,CAACH,GAAD,CAAN,GAAcJ,IAAd;QACAA,IAAI,GAAGO,QAAP;MACD;;MACDZ,UAAU,GAAGC,MAAM,CAACY,KAAP,CAAab,UAAb,EAAyBK,IAAzB,CAAb;IACD,CATD;EAUD;;EACD,OAAOL,UAAP;AACD","names":["isNonEmptyArray","DeepMerger","isExecutionPatchIncrementalResult","value","isExecutionPatchInitialResult","isExecutionPatchResult","mergeIncrementalData","prevResult","result","mergedData","merger","incremental","forEach","_a","data","path","i","length","key","isNumericKey","isNaN","parent_1","merge"],"sources":["/home/agustin/Documents/GitHub/fullstackOpen22/part8/frontend/node_modules/@apollo/src/utilities/common/incrementalResult.ts"],"sourcesContent":["import {\n  ExecutionPatchIncrementalResult,\n  ExecutionPatchInitialResult,\n  ExecutionPatchResult,\n  FetchResult,\n} from \"../../link/core\";\nimport { isNonEmptyArray } from \"./arrays\";\nimport { DeepMerger } from \"./mergeDeep\";\n\nexport function isExecutionPatchIncrementalResult(\n  value: FetchResult\n): value is ExecutionPatchIncrementalResult {\n  return \"incremental\" in value;\n}\n\nexport function isExecutionPatchInitialResult(\n  value: FetchResult\n): value is ExecutionPatchInitialResult {\n  return \"hasNext\" in value && \"data\" in value;\n}\n\nexport function isExecutionPatchResult(\n  value: FetchResult\n): value is ExecutionPatchResult {\n  return (\n    isExecutionPatchIncrementalResult(value) ||\n    isExecutionPatchInitialResult(value)\n  );\n}\n\nexport function mergeIncrementalData<TData>(\n  prevResult: TData,\n  result: ExecutionPatchResult<TData>\n) {\n  let mergedData = prevResult;\n  const merger = new DeepMerger();\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach(({ data, path }) => {\n      for (let i = path.length - 1; i >= 0; --i) {\n        const key = path[i];\n        const isNumericKey = !isNaN(+key);\n        const parent: Record<string | number, any> = isNumericKey ? [] : {};\n        parent[key] = data;\n        data = parent as typeof data;\n      }\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n  return mergedData as TData;\n}\n"]},"metadata":{},"sourceType":"module"}