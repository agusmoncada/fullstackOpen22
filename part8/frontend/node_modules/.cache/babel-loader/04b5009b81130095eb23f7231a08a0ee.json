{"ast":null,"code":"import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n  var errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n  var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (incrementalResult) {\n      if (incrementalResult.errors) {\n        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n      }\n    });\n  }\n\n  return graphQLErrors;\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,iCAAT,QAAkD,wBAAlD;AAEA,OAAM,SAAUC,qBAAV,CAAgCC,MAAhC,EAAmD;EACvD,IAAMC,MAAM,GAAGC,0BAA0B,CAACF,MAAD,CAAzC;EACA,OAAOH,eAAe,CAACI,MAAD,CAAtB;AACD;AAED,OAAM,SAAUC,0BAAV,CAAqCF,MAArC,EAAwD;EAC5D,IAAMG,aAAa,GAAGN,eAAe,CAACG,MAAM,CAACC,MAAR,CAAf,GAClBD,MAAM,CAACC,MAAP,CAAcG,KAAd,CAAoB,CAApB,CADkB,GAElB,EAFJ;;EAIA,IACEN,iCAAiC,CAACE,MAAD,CAAjC,IACAH,eAAe,CAACG,MAAM,CAACK,WAAR,CAFjB,EAGE;IACAL,MAAM,CAACK,WAAP,CAAmBC,OAAnB,CAA2B,UAACC,iBAAD,EAAkB;MAC3C,IAAIA,iBAAiB,CAACN,MAAtB,EAA8B;QAC5BE,aAAa,CAACK,IAAd,CAAkBC,KAAlB,gBAAsBF,iBAAiB,CAACN,MAAxC;MACD;IACF,CAJD;EAKD;;EACD,OAAOE,aAAP;AACD","names":["isNonEmptyArray","isExecutionPatchIncrementalResult","graphQLResultHasError","result","errors","getGraphQLErrorsFromResult","graphQLErrors","slice","incremental","forEach","incrementalResult","push","apply"],"sources":["/home/agustin/Documents/GitHub/fullstackOpen22/part8/frontend/node_modules/@apollo/src/utilities/common/errorHandling.ts"],"sourcesContent":["import { FetchResult } from \"../../link/core\";\nimport { isNonEmptyArray } from \"../../utilities/common/arrays\";\nimport { isExecutionPatchIncrementalResult } from \"../../utilities/common/incrementalResult\";\n\nexport function graphQLResultHasError(result: FetchResult): boolean {\n  const errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\n\nexport function getGraphQLErrorsFromResult(result: FetchResult) {\n  const graphQLErrors = isNonEmptyArray(result.errors)\n    ? result.errors.slice(0)\n    : [];\n\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach((incrementalResult) => {\n      if (incrementalResult.errors) {\n        graphQLErrors.push(...incrementalResult.errors);\n      }\n    });\n  }\n  return graphQLErrors;\n}\n"]},"metadata":{},"sourceType":"module"}